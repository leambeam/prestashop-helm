# Default values for PrestaShop and MySQL workloads.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Common logic shared across PrestaShop and MySQL workloads
common:
  # Persistence settings for PrestaShop and MySQL workloads
  persistence: 
    # true: Enables persistent storage:
    # - Uses a StatefulSet for MySQL.
    # - Creates PersistentVolumeClaims (PVCs) for MySQL and PrestaShop.
    # - Creates a shared StorageClass.
    # - Mounts volumes to both PrestaShop and MySQL.
    # - Makes MySQL a headless service for stable DNS.
    #
    # false: Disables persistent storage:
    # - Uses a Deployment instead of a StatefulSet for MySQL.
    # - No persistent storage (PVCs or StorageClass) PrestaShop and MySQL.
    # - No volume mounts for PrestaShop and MySQL.
    enabled: false
    # Requires persistence.enabled: true
    # Triggeres two batch jobs that update domain in PrestaShop and MySQL.
    switchDomain: false
    # Requires persistence.enabled: true
    # Directory must be manually created
    # Location on the host machine where the contents of the Persistent Volumes will be stored
    storageDirectory: /mnt/prestashop-storage

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
prestashop: 
  replicaCount: 1

  # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    repository: gitlab.labranet.jamk.fi:4567/presta-shop-development-release-x/presta-shop-service-x
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

  # This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  # No need at the moment since 'service-x' and 'database-x' are public, otherwise use the secret
  imagePullSecrets: []
    # - name: presta-base-secret
  # This is to override the chart name.
  nameOverride: ""
  fullnameOverride: ""

  # This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # This is for setting Kubernetes Annotations to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}
  # This is for setting Kubernetes Labels to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Ports inside the PrestaShop container i.e ports that you would usually use when running 'service-x' in Docker.
  containerPorts:
    http: 80
    https: 443
  # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    ports: # Set ports for external access
      http: 80 
      https: 443 

  # This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress: 
    # true: use https ingress 
    # false: use http ingress
    enabled: false
    letsencrypt:
    # true: use production version of the letsencrypt issuer and ingress
    # false: use staging version of letsencrypt issuer and ingress
      isProd: false    
    className: "nginx"
    annotations: 
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # hosts:
    #   - host: chart-example.local -- referenced from 'psDomain' in 'ingress-https.yaml'
    paths:
      - path: /
        pathType: Prefix
    tls: 
      - secretName: presta-shop-tls
      #  hosts:
      #    - chart-example.local  -- referenced from 'psDomain' in 'ingress-https.yaml'

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  # livenessProbe:
  #   httpGet:
  #     path: /
  #     port: http
  # readinessProbe:
  #   httpGet:
  #     path: /
  #     port: http

  # This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # Configurations for Presistent Volume (PV) and Presistent Volume Claim (PVC) for PrestaShop
  # Requires common.persistence.enabled: true
  persistence:
    # The name of the existing Persistent Volume (PV). 
    # If provided, the PrestaShop pod will be attached to it.
    existingPVName: ""
    # PVC storage request for PrestaShop volume
    size: 8Gi
    # PrestaShop volume
    volumes: 
    - name: prestashop-data
      persistentVolumeClaim:
        claimName: prestashop-pvc
    # PrestaShop volume mount
    volumeMounts: 
    - name: prestashop-data
      mountPath: "/var/www/html"

  
  nodeSelector: {}

  tolerations: []

  affinity: {}

  # Environment variables referenced by 'prestashop/templates/deployment.yaml' and 'prestashop/templates/mysql-deployment.yaml' for website and db setup.
  # These variables can be modified on install by passing the flag '--set' fex '--set prestashop.env.PS_DOMAIN="newdomain.com"'.
  # See: https://hub.docker.com/r/prestashop/prestashop/ for more information on variables.
  
  env:
    # This is the only variable that can't be modified at this point since database is expecting root user to be named 'root'.
    # dbUser: "root" 
    # Do not change unless you want to perform a manual install
    psInstallAuto: "1" # Set to true thus will perform an auto install.

    dbName: "prestashop"
    dbPasswd: "adminPrEsTa123" 
    psDomain: "wimma-capstone.jamk.fi"
    psCountry: "FI"
    psLanguage: "en"
    adminMail: "testuser@mail.com"
    adminPasswd: "ReAlPaSsWoRd759***"
    psFolderAdmin: "admin228"


mysql: 

  replicaCount: 1

  # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    repository: gitlab.labranet.jamk.fi:4567/presta-shop-development-release-x/presta-database-x
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

  # This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  # No need at the moment since 'service-x' and 'database-x' are public, otherwise use the secret
  imagePullSecrets: []
    # - name: presta-base-secret
  # This is to override the chart name.
  nameOverride: ""
  fullnameOverride: ""

  # This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # This is for setting Kubernetes Annotations to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}
  # This is for setting Kubernetes Labels to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Ports inside the PrestaShop container i.e ports that you would usually use when running in Docker.
  containerPorts:
    mysql: 3306
  # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    # Used by 'mysql' service account when persistence is disabled 
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    ports: # Set ports for external access
      mysql: 3306


  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  # livenessProbe:
  #   httpGet:
  #     path: /
  #     port: http
  # readinessProbe:
  #   httpGet:
  #     path: /
  #     port: http

  # This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # Configurations for Presistent Volume (PV) and Presistent Volume Claim (PVC) for MySQL
  # Requires common.persistence.enabled: true
  persistence:
    # The name of the existing Persistent Volume (PV). 
    # If provided, the MySQL pod will be attached to it.
    existingPVName: ""
    # PVC storage request for MySQL volume
    size: 8Gi
    # MySQL volume claim name
    volumeClaimName: mysql-data
    # MySQL volume mount
    volumeMounts: 
    - name: mysql-data
      mountPath: "/var/lib/mysql"


  nodeSelector: {}

  tolerations: []

  affinity: {}
